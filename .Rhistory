library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
pairs(Dados_semChar)
Correção = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção Reli&Shop = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção Reli_Shop = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção Reli_Shop = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção ReliShop = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correção_Reli_Shop = cor(Dados_semChar$Religious, Dados_semChar$Shopping)
Correlação_matriz = cor(Dados_semChar)
View(Correlação_matriz)
hist(Dados_semChar$Religious)
matriz_cor = cor(Dados_semChar)
print(matriz_cor)
pairs(Dados_semChar)
Correlação_matriz = cor(Dados_semChar)
hist(Dados_semChar$Religious)
hist(Dados_semChar$Religious, brakes = 8)
hist(Dados_semChar$Religious, brakes = 8)
hist(Dados_semChar$Religious, breakes = 8)
hist(Dados_semChar$Religious, breaks = 8)
hist(Dados_semChar$Religious, breaks = 6)
hist(Dados_semChar$Religious, breaks = 6)
hist(Dados_semChar$Religious, breaks = 5)
hist(Dados_semChar$Religious, breaks = 4)
hist(Dados_semChar$Religious, breaks = 4)
hist(Dados_semChar$Religious, breaks = 7)
hist(Dados_semChar$Religious, breaks = 10)
hist(Dados_semChar$Religious, breaks = 10)
hist(Dados_semChar$Religious, breaks = 11)
hist(Dados_semChar$Religious, breaks = 10)
hist(Dados_semChar$Religious)
hist(Dados_semChar$Religious)
hist(Dados_semChar$Sports)
hist(Dados_semChar$Nature)
hist(Dados_semChar$Theatre)
hist(Dados_semChar$Shopping)
hist(Dados_semChar$Picnic)
hist(Dados_semChar$Religious)
hist(Dados_semChar$Sports)
hist(Dados_semChar$Nature)
hist(Dados_semChar$Theatre)
hist(Dados_semChar$Shopping)
hist(Dados_semChar$Picnic)
hist(Dados_semChar$Sports) ## 12 breaks (sugestão R) ##
hist(Dados_semChar$Sports, breaks = 8)
hist(Dados_semChar$Sports, breaks = 10)
hist(Dados_semChar$Sports, breaks = 9)
hist(Dados_semChar$Sports, breaks = 9)
hist(Dados_semChar$Sports, breaks = 12)
hist(Dados_semChar$Sports, breaks = 20)
View(Dados_semChar)
View(Dados_semChar)
hist(Dados_semChar$Sports, breaks = 6)
Num_obs = length(Dados_semChar)
Num_bins =ceiling(sqrt(Num_obs))
hist(dados, breaks = Num_bins)
hist(Dados_semChar, breaks = Num_bins)
Num_obs = length(Dados_semChar)
Num_bins = ceiling(sqrt(Num_obs))
hist(Dados_semChar, breaks = Num_bins)
hist(Dados_semChar, breaks = Num_bins)
view(Num_bins)
hist(Dados_semChar, breaks = 3)
hist(Dados_semChar, breaks = 3)
Num_obs = length(Dados_semChar$Sports)
Num_bins = ceiling(sqrt(Num_obs)) ## bins = 3 ##
hist(Dados_semChar$Sports, breaks = 16)
Num_obs = length(Dados_semChar$Sports)
Num_bins = ceiling(sqrt(Num_obs)) ## bins = 3 ##
hist(Dados_semChar$Sports, breaks = 16)
Num_obs = length(Dados_semChar$Religious)
Num_bins_reli = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Sports, breaks = 16)
Num_obs = length(Dados_semChar$Religious)
Num_bins_reli = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Religious, breaks = 16)
Num_obs_Reli = length(Dados_semChar$Religious)
Num_bins_reli = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Religious, breaks = 16)
Num_obs_nat = length(Dados_semChar$Nature)
Num_bins_nat = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Nature, breaks = 16)
Num_obs_thea = length(Dados_semChar$Theatre)
Num_bins_thea = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Theatre, breaks = 16)
Num_obs_pic = length(Dados_semChar$Picnic)
Num_bins_pic = ceiling(sqrt(Num_obs)) ## bins = 16 ##
hist(Dados_semChar$Picnic, breaks = 16)
install.packages("ggpubr")
library(ggpubr)
library(ggpubr)
Q-Q_plots = lapply(Dados_semChar$Religious, ggqqplot)
Q-Q_plots = lapply(Dados_semChar$Religious, ggqqplot)
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
Q-Q_plots = lapply(Dados_semChar$Religious, ggqqplot)
print(Q-Q_plots)
Q-Q_plots = lapply(Dados_semChar$Religious, ggqqplot)
QQ_plots = lapply(Dados_semChar$Religious, ggqqplot)
print(QQ_plots)
QQ_plots = lapply(Dados_semChar$Religious, ggqqplot)
print(QQ_plots)
print(QQ_plots)
hist(Dados_semChar$Religious) ## 9 brakes ##
hist(Dados_semChar$Nature) ## 6 breaks ##
hist(Dados_semChar$Theatre) ## 9 breaks ##
hist(Dados_semChar$Shopping) ## 10 breaks ##
hist(Dados_semChar$Picnic) ## 9 breaks ##
hist(Dados_semChar$Sports) ## 12 breaks ##
hist(Dados_semChar$Religious) ## 9 brakes ##
completude = colMeans(!is.na(Dados_semChar$Picnic)) * 100
Completude = colMeans(!is.na(Dados_semChar$Picnic)) * 100
Completude = colMeans(!is.na = FALSE(Dados_semChar$Picnic)) * 100
Completude = colMeans(!is.na(Dados_semChar)) * 100
print(completude)
Completude = colMeans(!is.na(Dados_semChar)) * 100
print(completude)
print(completude)
print(Completude)
install.packages("MICE")
install.packages("mice")
library(mice)
library(mice)
Dados_imputados = mice(Dados_semChar, m = 5, method = 'pmm', seed = 333)
Dados_imputados = mice(Dados_semChar, m = 5, method = 'pmm', seed = 333)
library(shiny)
library(shiny)
library(shinydashboard)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(shinydashboard)
library(shiny)
library(tidyverse)
library(data.table)
library(scales)
library(markdown)
library(shiny)
library(htmlwidgets)
library(shinyWidgets)
library(RColorBrewer)
library(knitr)
library(maps)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
Cabeçalho = dashboardHeader(title = "Distribuição visitas shopping")
Barra_lateral = dashboardSidebar()
Cabeçalho = dashboardHeader(title = "Distribuição visitas shopping")
Barra_lateral = dashboardSidebar()
Corpo = dashboardBody()
dashboardPage(header = Cabeçalho, sidebar = Barra_lateral, body = Corpo)
Cabeçalho = dashboardHeader(title = "Distribuição visitas shopping")
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shiny)
library(tidyverse)
library(data.table)
library(scales)
library(markdown)
library(shiny)
library(htmlwidgets)
library(shinyWidgets)
library(RColorBrewer)
library(knitr)
library(maps)
library(shinydashboard)
Cabeçalho = dashboardHeader(title = "Distribuição visitas shopping")
Barra_lateral = dashboardSidebar()
Corpo = dashboardBody()
dashboardPage(header = Cabeçalho, sidebar = Barra_lateral, body = Corpo)
install.packages("shiny")
install.packages("shiny")
# Define UI for application that draws a histogram
fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
library(ggplot2)
## Definindo UI ##
ui <- fluidPage(
## Título do aplicativo ##
titlePanel("Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
## Definindo UI ##
ui <- fluidPage(
## Título do aplicativo ##
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
install.packages("shinydashboard")
install.packages("shiny")
library(shiny)
library(ggplot2)
library(tidyverse)
library(data.table)
library(scales)
library(markdown)
library(htmlwidgets)
library(shinyWidgets)
library(RColorBrewer)
library(knitr)
library(maps)
library(shinydashboard)
## Definindo UI ##
ui <- fluidPage(
## Título do aplicativo ##
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
# Definir servidor
server <- function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Gerar dados de exemplo (substitua com seus próprios dados)
dados <- data.frame(x = 1:10, y = rnorm(10))
# Criar o gráfico em linha com ggplot2
p <- ggplot(dados, aes(x = x, y = y)) +
geom_line(color = "blue") + # Alterar a cor da linha para azul
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definir servidor
server <- function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Criar o gráfico em linha com ggplot2
p <- ggplot(Dados_semChar, aes_string(x = "x", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definindo UI
ui <- fluidPage(
# Título do aplicativo
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
# Definir servidor
server <- function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Criar o gráfico em linha com ggplot2
p <- ggplot(Dados_semChar, aes_string(x = "x", y = input$variavel)) +
geom_line(color = "blue") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definindo UI
ui <- fluidPage(
# Título do aplicativo
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
server = function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Gerar dados de exemplo (substitua com seus próprios dados)
dados <- data.frame(x = 1:10, y = rnorm(10))
# Criar o gráfico em linha com ggplot2
p = ggplot(dados, aes_string(x = "x", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
server = function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Gerar dados de exemplo (substitua com seus próprios dados)
dados <- data.frame(x = 1:10, y = rnorm(10))
# Criar o gráfico em linha com ggplot2
p = ggplot(Dados_semChar, aes_string(x = "x", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definindo UI
ui <- fluidPage(
# Título do aplicativo
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
# Definir servidor
server <- function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Criar o gráfico em linha com ggplot2
p <- ggplot(Dados_semChar, aes_string(x = "Shopping", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definindo UI
ui <- fluidPage(
# Título do aplicativo
titlePanel("Meu Dashboard Shiny"),
# Sidebar com controles de seleção
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 10, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico
mainPanel(
plotOutput("line_plot")
)
)
)
# Definir servidor
server <- function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot <- renderPlot({
# Criar o gráfico em linha com ggplot2
p <- ggplot(Dados_semChar, aes_string(x = "Shopping", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definindo UI #
ui <- fluidPage(
# Título #
titlePanel("Meu Dashboard Shiny"),
# Dimenssões e limites #
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 100, value = c(0, 10)),
sliderInput("limite_y", "Limite Y", min = 0, max = 100, value = c(0, 100))
),
# Área principal com o gráfico #
mainPanel(
plotOutput("line_plot")
)
)
)
## Definindo servidor ##
server = function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot = renderPlot({
# Criar o gráfico em linha com ggplot2
p = ggplot(Dados_semChar, aes_string(x = "Shopping", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar Shiny #
shinyApp(ui = ui, server = server)
# Definindo UI #
ui <- fluidPage(
# Título #
titlePanel("Meu Dashboard Shiny"),
# Dimenssões e limites #
sidebarLayout(
sidebarPanel(
selectInput("variavel", "Selecione a variável", choices = names(Dados_semChar), selected = NULL),
sliderInput("limite_x", "Limite X", min = 0, max = 1000, value = c(0, 1000)),
sliderInput("limite_y", "Limite Y", min = 0, max = 1000, value = c(0, 1000))
),
# Área principal com o gráfico #
mainPanel(
plotOutput("line_plot")
)
)
)
## Definindo servidor ##
server = function(input, output) {
# Função para renderizar o gráfico em linha
output$line_plot = renderPlot({
# Criar o gráfico em linha com ggplot2
p = ggplot(Dados_semChar, aes_string(x = "Shopping", y = input$variavel)) +
geom_line(color = "red") + # Alterar a cor da linha para vermelho
xlim(input$limite_x[1], input$limite_x[2]) + # Definir limites do eixo X
ylim(input$limite_y[1], input$limite_y[2]) # Definir limites do eixo Y
# Exibir o gráfico
print(p)
})
}
# Executar Shiny #
shinyApp(ui = ui, server = server)
